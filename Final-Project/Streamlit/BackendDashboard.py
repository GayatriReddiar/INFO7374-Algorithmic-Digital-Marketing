#IMPORT REQUIRED MODULES
import streamlit as st
import numpy as np
import pandas as pd
import time
import datetime
from PIL import Image
import json, requests
import matplotlib.pyplot as plt
import seaborn as sns


st.markdown('<style>body{background-color: #DEF8EB;}</style>',unsafe_allow_html=True)

st.title("Marketing Application")
st.write("---------------------------------------------------------------")
image = Image.open('marketing.jpg')
st.image(image, caption='',use_column_width=True)
typeOfRequest = st.radio("Select type of request",('Marketing Campaign Predictor App','Revenue per customer', 'Churn Rate', 'Demand Forecasting'))
st.write("---------------------------------------------------------------")
if typeOfRequest == 'Revenue per customer':
    st.subheader("Revenue Prediction per Customer:")
    st.write(" ")
    a = st.button("Calculate the revenue for top customers")
    if a :
        st.markdown("**These are the top performing customers with their predicted revenue for the next 1 year**")
        response = requests.get(f"http://127.0.0.1:8000/RevenuePrediction")
        data_dict = response.json()
        
        b=data_dict['forecast']
        c = list(b.keys())
        d = list(b.values())
        c1 = pd.DataFrame(c)
        z1= pd.DataFrame(d)
        m = pd.concat([c1,z1],axis=1)
        m.columns = ['CustomerID','Expected Revenue']
        st.table(m)
        
        
        st.subheader("Top Customers - Revenue Statistics")
        b=data_dict['forecast']
        c = list(b.keys())
        d = list(b.values())
        fig = plt.figure(figsize=(15,5))
        ax = fig.add_axes([0,0,1,1])
        CustomerID = c
        Revenue = d
        ax.bar(CustomerID,Revenue)
        plt.title("Predicted Revenue generated by top Customers",fontweight="bold")
        plt.show()
        st.pyplot()

        st.subheader("Device Statistics")
        image1 = Image.open('device.jpg')
        st.image(image1, caption='',use_column_width=True)

        st.subheader("Traffic Source Statistics")
        image2 = Image.open('source.png')
        st.image(image2, caption='',use_column_width=True)
    
        #st.write(url("https://www.google.com/"))
    



elif typeOfRequest == 'Churn Rate':
    st.subheader("Churn Rate")
    a = st.button("Calculate the churn stats")
    if a :
        
        response = requests.get(f"http://127.0.0.1:8000/ChurnPrediction")
        data_dict = response.json()
        b = data_dict['forecast']
        c = list(b.keys())
        z = list(b.values())
        c1 = pd.DataFrame(c)
        z1= pd.DataFrame(z)
        m = pd.concat([c1,z1],axis=1)
        m.columns = ['CustomerID','isChurned']
        st.table(m.head())
        
        
        m.isChurned.value_counts().plot(kind="pie",autopct="%.1f%%",labels=["Non-Churned","Churned"])
        plt.ylabel("")
        plt.title("Churn Variable Distribution",fontweight="bold")
        plt.show()  
        st.pyplot()
        
        
        churn = pd.read_csv("ChurnPredictionPlotsData.csv")
        ax = sns.barplot(x="AGE_DESC",y="isChurned",data=churn,order=["19-24","25-34","35-44","45-54","55-64","65+"])
        ax.axhline(y=churn.isChurned.sum()/len(churn),c="red",label="population mean")
        ax.legend()
        plt.title("Churn vs Age-Group",fontweight="bold")
        plt.show()  
        st.pyplot()

        st.subheader("")
        ax = sns.barplot(x="INCOME_DESC",y="isChurned",data=churn,order=["Under 15K","15-24K","25-34K","35-49K","50-74K","75-99K","100-124K","125-149K","150-174K","175-199K","200-249K","250K+"])
        ax.set_xticklabels(ax.get_xticklabels(),rotation=45)
        ax.axhline(y=churn.isChurned.sum()/len(churn),c="red",label="population mean")
        ax.legend()
        plt.title("Churn vs Income-Group",fontweight="bold")
        plt.show()
        st.pyplot()

        st.subheader("")
        ax = sns.barplot(y=pd.cut(churn.no_of_redeems,bins=[0,1,10,35],duplicates="drop"),x="isChurned",data=churn,orient="h")
        ax.axvline(x=churn.isChurned.sum()/len(churn),c="red",label="population mean")
        ax.legend()
        plt.title("Churn vs Redemptions",fontweight="bold")
        plt.show()
        st.pyplot()


elif typeOfRequest == 'Demand Forecasting':
    st.subheader("Demand Forecasting")
    
    item = st.text_input('Enter the item-id you want the demand forecast of',value = '15')
    dept =  st.text_input('Enter the department-id you want the demand forecast of',value = '1')
    itemID = int(item)
    deptID = int(dept)
    a = st.button("Forecast the demand")
    if a : 
        response = requests.get(f"http://127.0.0.1:8000/DemandForecasting?itemID={itemID}&deptID={deptID}")
        data_dict = response.json() 
        b = data_dict['forecast']
        
        #st.table(b)
        c = list(b.keys())
        z = list(b.values())
        c1 = pd.DataFrame(c)
        z1= pd.DataFrame(z)
        m = pd.concat([c1,z1],axis=1)
        
        
        m.columns = ["Date","Actual Expected Demand","Lowest Expected Demand","Highest Expected Demand"]
        cols = ["Actual Expected Demand","Lowest Expected Demand","Highest Expected Demand"]
        m[cols] = m[cols].applymap(np.int64)
        st.table(m)
        st.subheader("Date vs Expected Demand")
        prophet = pd.read_csv("Prophet.csv")
        pivoted = pd.pivot_table(prophet, values='yhat', index='ds')
        pivoted.plot(figsize=(12,12));
        st.pyplot()









elif typeOfRequest == 'Marketing Campaign Predictor App':
    st.subheader("Marketing Campaign Predictor")
    st.markdown('**Budget:**')
    budget1 =  st.text_input('Budget:',value='10000')  
    budget = int(budget1)  
    st.markdown('**Number of Days:**')
    days1 =  st.text_input('Number of Days:',value='100')   
    days = int(days1) 
    st.markdown('**Select the Channel:**')
    fb = int(st.checkbox('Facebook'))
    
    insta =  int(st.checkbox('Instagram'))   
    googl = int(st.checkbox('Google'))
    tw = int(st.checkbox('Twitter'))

    a = st.button("Predict the marketing metrics")
    if a : 
        if (fb == 0 and tw == 0 and insta == 0 and googl == 0) :
            st.error('Please select atleast one channel')
        else :     
         with st.spinner('Predicting the marketing metrics...'):
            time.sleep(3)
        
         response = requests.get(f"http://127.0.0.1:8000/CampaignPrediction?budget={budget}&days={days}&fb={fb}&insta={insta}&search={googl}&twitter={tw}")
         data_dict = response.json()
         #st.write(data_dict)
         b = data_dict['forecast']
         c = list(b.keys())
         #z= pd.DataFrame(c)
         #st.table(z)
         z = list(b.values())
            
         
         #st.write(z)

         y = pd.DataFrame(z)
         y.columns = ['Impressions', 'Budget', 'Number of days', 'Facebook','Instagram','Google','Twitter']  
         st.table(y)
         q = c[0]
         w = float(q)
         
         st.write("The conversion ratio for these metrics is :",round(w,3))
         st.write("This ratio denotes the percentage of impressions that will convert into purchases")
         

         #st.table(b)
         #b.Index(['Impressions', 'Budget', 'Number of days', 'Facebook','Twitter','Instagram','Google'])    
         #st.table(b)
        # a = {'Index Title': ['Impressions', 'Budget', 'Number of days', 'Facebook','Twitter','Instagram','Google'] }
        # st.table(a)     
         






